// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NFMsgMysql.proto

#include "NFMsgMysql.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace NFMsg {
class PackMysqlParamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PackMysqlParam>
      _instance;
} _PackMysqlParam_default_instance_;
class PackMysqlServerInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PackMysqlServerInfo>
      _instance;
} _PackMysqlServerInfo_default_instance_;
}  // namespace NFMsg
namespace protobuf_NFMsgMysql_2eproto {
static void InitDefaultsPackMysqlParam() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PackMysqlParam_default_instance_;
    new (ptr) ::NFMsg::PackMysqlParam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PackMysqlParam::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PackMysqlParam =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPackMysqlParam}, {}};

static void InitDefaultsPackMysqlServerInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::NFMsg::_PackMysqlServerInfo_default_instance_;
    new (ptr) ::NFMsg::PackMysqlServerInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NFMsg::PackMysqlServerInfo::InitAsDefaultInstance();
}

LIBPROTOC_EXPORT ::google::protobuf::internal::SCCInfo<0> scc_info_PackMysqlServerInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPackMysqlServerInfo}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PackMysqlParam.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PackMysqlServerInfo.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, strrecordname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, strkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, fieldveclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, valueveclist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, bexit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, nreqid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, nret_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlParam, etype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, nrconnecttime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, nrconnecount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, nport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, strdbname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, strdnsip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, strdbuser_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, strdbpwd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::NFMsg::PackMysqlServerInfo, nserverid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::NFMsg::PackMysqlParam)},
  { 13, -1, sizeof(::NFMsg::PackMysqlServerInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PackMysqlParam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::NFMsg::_PackMysqlServerInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NFMsgMysql.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020NFMsgMysql.proto\022\005NFMsg\032\016NFDefine.prot"
      "o\032\017NFMsgBase.proto\"\237\001\n\016PackMysqlParam\022\025\n"
      "\rstrRecordName\030\001 \001(\014\022\016\n\006strKey\030\002 \001(\014\022\024\n\014"
      "fieldVecList\030\003 \003(\014\022\024\n\014valueVecList\030\004 \003(\014"
      "\022\r\n\005bExit\030\005 \001(\003\022\016\n\006nreqid\030\006 \001(\003\022\014\n\004nRet\030"
      "\007 \001(\003\022\r\n\005eType\030\010 \001(\003\"\256\001\n\023PackMysqlServer"
      "Info\022\025\n\rnRconnectTime\030\001 \001(\003\022\024\n\014nRconneCo"
      "unt\030\002 \001(\003\022\r\n\005nPort\030\003 \001(\003\022\021\n\tstrDBName\030\004 "
      "\001(\014\022\020\n\010strDnsIp\030\005 \001(\014\022\021\n\tstrDBUser\030\006 \001(\014"
      "\022\020\n\010strDBPwd\030\007 \001(\014\022\021\n\tnServerID\030\010 \001(\003b\006p"
      "roto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 405);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NFMsgMysql.proto", &protobuf_RegisterTypes);
  ::protobuf_NFDefine_2eproto::AddDescriptors();
  ::protobuf_NFMsgBase_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NFMsgMysql_2eproto
namespace NFMsg {

// ===================================================================

void PackMysqlParam::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackMysqlParam::kStrRecordNameFieldNumber;
const int PackMysqlParam::kStrKeyFieldNumber;
const int PackMysqlParam::kFieldVecListFieldNumber;
const int PackMysqlParam::kValueVecListFieldNumber;
const int PackMysqlParam::kBExitFieldNumber;
const int PackMysqlParam::kNreqidFieldNumber;
const int PackMysqlParam::kNRetFieldNumber;
const int PackMysqlParam::kETypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackMysqlParam::PackMysqlParam()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgMysql_2eproto::scc_info_PackMysqlParam.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PackMysqlParam)
}
PackMysqlParam::PackMysqlParam(const PackMysqlParam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fieldveclist_(from.fieldveclist_),
      valueveclist_(from.valueveclist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strrecordname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strrecordname().size() > 0) {
    strrecordname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrecordname_);
  }
  strkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strkey().size() > 0) {
    strkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strkey_);
  }
  ::memcpy(&bexit_, &from.bexit_,
    static_cast<size_t>(reinterpret_cast<char*>(&etype_) -
    reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PackMysqlParam)
}

void PackMysqlParam::SharedCtor() {
  strrecordname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bexit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&etype_) -
      reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
}

PackMysqlParam::~PackMysqlParam() {
  // @@protoc_insertion_point(destructor:NFMsg.PackMysqlParam)
  SharedDtor();
}

void PackMysqlParam::SharedDtor() {
  strrecordname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PackMysqlParam::descriptor() {
  ::protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackMysqlParam& PackMysqlParam::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgMysql_2eproto::scc_info_PackMysqlParam.base);
  return *internal_default_instance();
}


void PackMysqlParam::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldveclist_.Clear();
  valueveclist_.Clear();
  strrecordname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bexit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&etype_) -
      reinterpret_cast<char*>(&bexit_)) + sizeof(etype_));
  _internal_metadata_.Clear();
}

bool PackMysqlParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PackMysqlParam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes strRecordName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strrecordname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strKey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes fieldVecList = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_fieldveclist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes valueVecList = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_valueveclist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 bExit = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bexit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nreqid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nreqid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nRet = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 eType = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &etype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PackMysqlParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PackMysqlParam)
  return false;
#undef DO_
}

void PackMysqlParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strRecordName = 1;
  if (this->strrecordname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->strrecordname(), output);
  }

  // bytes strKey = 2;
  if (this->strkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->strkey(), output);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->fieldveclist(i), output);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->valueveclist(i), output);
  }

  // int64 bExit = 5;
  if (this->bexit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->bexit(), output);
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->nreqid(), output);
  }

  // int64 nRet = 7;
  if (this->nret() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->nret(), output);
  }

  // int64 eType = 8;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->etype(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PackMysqlParam)
}

::google::protobuf::uint8* PackMysqlParam::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PackMysqlParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes strRecordName = 1;
  if (this->strrecordname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->strrecordname(), target);
  }

  // bytes strKey = 2;
  if (this->strkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->strkey(), target);
  }

  // repeated bytes fieldVecList = 3;
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->fieldveclist(i), target);
  }

  // repeated bytes valueVecList = 4;
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->valueveclist(i), target);
  }

  // int64 bExit = 5;
  if (this->bexit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->bexit(), target);
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->nreqid(), target);
  }

  // int64 nRet = 7;
  if (this->nret() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->nret(), target);
  }

  // int64 eType = 8;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->etype(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PackMysqlParam)
  return target;
}

size_t PackMysqlParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PackMysqlParam)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes fieldVecList = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->fieldveclist_size());
  for (int i = 0, n = this->fieldveclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->fieldveclist(i));
  }

  // repeated bytes valueVecList = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->valueveclist_size());
  for (int i = 0, n = this->valueveclist_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->valueveclist(i));
  }

  // bytes strRecordName = 1;
  if (this->strrecordname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strrecordname());
  }

  // bytes strKey = 2;
  if (this->strkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strkey());
  }

  // int64 bExit = 5;
  if (this->bexit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->bexit());
  }

  // int64 nreqid = 6;
  if (this->nreqid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nreqid());
  }

  // int64 nRet = 7;
  if (this->nret() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nret());
  }

  // int64 eType = 8;
  if (this->etype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->etype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackMysqlParam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlParam* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackMysqlParam>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PackMysqlParam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PackMysqlParam)
    MergeFrom(*source);
  }
}

void PackMysqlParam::MergeFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PackMysqlParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldveclist_.MergeFrom(from.fieldveclist_);
  valueveclist_.MergeFrom(from.valueveclist_);
  if (from.strrecordname().size() > 0) {

    strrecordname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strrecordname_);
  }
  if (from.strkey().size() > 0) {

    strkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strkey_);
  }
  if (from.bexit() != 0) {
    set_bexit(from.bexit());
  }
  if (from.nreqid() != 0) {
    set_nreqid(from.nreqid());
  }
  if (from.nret() != 0) {
    set_nret(from.nret());
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
}

void PackMysqlParam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlParam::CopyFrom(const PackMysqlParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PackMysqlParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlParam::IsInitialized() const {
  return true;
}

void PackMysqlParam::Swap(PackMysqlParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackMysqlParam::InternalSwap(PackMysqlParam* other) {
  using std::swap;
  fieldveclist_.InternalSwap(CastToBase(&other->fieldveclist_));
  valueveclist_.InternalSwap(CastToBase(&other->valueveclist_));
  strrecordname_.Swap(&other->strrecordname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strkey_.Swap(&other->strkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bexit_, other->bexit_);
  swap(nreqid_, other->nreqid_);
  swap(nret_, other->nret_);
  swap(etype_, other->etype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PackMysqlParam::GetMetadata() const {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PackMysqlServerInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PackMysqlServerInfo::kNRconnectTimeFieldNumber;
const int PackMysqlServerInfo::kNRconneCountFieldNumber;
const int PackMysqlServerInfo::kNPortFieldNumber;
const int PackMysqlServerInfo::kStrDBNameFieldNumber;
const int PackMysqlServerInfo::kStrDnsIpFieldNumber;
const int PackMysqlServerInfo::kStrDBUserFieldNumber;
const int PackMysqlServerInfo::kStrDBPwdFieldNumber;
const int PackMysqlServerInfo::kNServerIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PackMysqlServerInfo::PackMysqlServerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NFMsgMysql_2eproto::scc_info_PackMysqlServerInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:NFMsg.PackMysqlServerInfo)
}
PackMysqlServerInfo::PackMysqlServerInfo(const PackMysqlServerInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strdbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strdbname().size() > 0) {
    strdbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbname_);
  }
  strdnsip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strdnsip().size() > 0) {
    strdnsip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdnsip_);
  }
  strdbuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strdbuser().size() > 0) {
    strdbuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbuser_);
  }
  strdbpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strdbpwd().size() > 0) {
    strdbpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbpwd_);
  }
  ::memcpy(&nrconnecttime_, &from.nrconnecttime_,
    static_cast<size_t>(reinterpret_cast<char*>(&nserverid_) -
    reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
  // @@protoc_insertion_point(copy_constructor:NFMsg.PackMysqlServerInfo)
}

void PackMysqlServerInfo::SharedCtor() {
  strdbname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdnsip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbuser_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbpwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nrconnecttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
}

PackMysqlServerInfo::~PackMysqlServerInfo() {
  // @@protoc_insertion_point(destructor:NFMsg.PackMysqlServerInfo)
  SharedDtor();
}

void PackMysqlServerInfo::SharedDtor() {
  strdbname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdnsip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbuser_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbpwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PackMysqlServerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PackMysqlServerInfo::descriptor() {
  ::protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PackMysqlServerInfo& PackMysqlServerInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NFMsgMysql_2eproto::scc_info_PackMysqlServerInfo.base);
  return *internal_default_instance();
}


void PackMysqlServerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  strdbname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdnsip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbuser_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strdbpwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nrconnecttime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nserverid_) -
      reinterpret_cast<char*>(&nrconnecttime_)) + sizeof(nserverid_));
  _internal_metadata_.Clear();
}

bool PackMysqlServerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NFMsg.PackMysqlServerInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 nRconnectTime = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nrconnecttime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nRconneCount = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nrconnecount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nPort = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nport_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDnsIp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdnsip()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBUser = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes strDBPwd = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strdbpwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 nServerID = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nserverid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NFMsg.PackMysqlServerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NFMsg.PackMysqlServerInfo)
  return false;
#undef DO_
}

void PackMysqlServerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nRconnectTime = 1;
  if (this->nrconnecttime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->nrconnecttime(), output);
  }

  // int64 nRconneCount = 2;
  if (this->nrconnecount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->nrconnecount(), output);
  }

  // int64 nPort = 3;
  if (this->nport() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->nport(), output);
  }

  // bytes strDBName = 4;
  if (this->strdbname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->strdbname(), output);
  }

  // bytes strDnsIp = 5;
  if (this->strdnsip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->strdnsip(), output);
  }

  // bytes strDBUser = 6;
  if (this->strdbuser().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->strdbuser(), output);
  }

  // bytes strDBPwd = 7;
  if (this->strdbpwd().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->strdbpwd(), output);
  }

  // int64 nServerID = 8;
  if (this->nserverid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->nserverid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:NFMsg.PackMysqlServerInfo)
}

::google::protobuf::uint8* PackMysqlServerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NFMsg.PackMysqlServerInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 nRconnectTime = 1;
  if (this->nrconnecttime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->nrconnecttime(), target);
  }

  // int64 nRconneCount = 2;
  if (this->nrconnecount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->nrconnecount(), target);
  }

  // int64 nPort = 3;
  if (this->nport() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->nport(), target);
  }

  // bytes strDBName = 4;
  if (this->strdbname().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strdbname(), target);
  }

  // bytes strDnsIp = 5;
  if (this->strdnsip().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strdnsip(), target);
  }

  // bytes strDBUser = 6;
  if (this->strdbuser().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strdbuser(), target);
  }

  // bytes strDBPwd = 7;
  if (this->strdbpwd().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->strdbpwd(), target);
  }

  // int64 nServerID = 8;
  if (this->nserverid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->nserverid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NFMsg.PackMysqlServerInfo)
  return target;
}

size_t PackMysqlServerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NFMsg.PackMysqlServerInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes strDBName = 4;
  if (this->strdbname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbname());
  }

  // bytes strDnsIp = 5;
  if (this->strdnsip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdnsip());
  }

  // bytes strDBUser = 6;
  if (this->strdbuser().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbuser());
  }

  // bytes strDBPwd = 7;
  if (this->strdbpwd().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->strdbpwd());
  }

  // int64 nRconnectTime = 1;
  if (this->nrconnecttime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecttime());
  }

  // int64 nRconneCount = 2;
  if (this->nrconnecount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nrconnecount());
  }

  // int64 nPort = 3;
  if (this->nport() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nport());
  }

  // int64 nServerID = 8;
  if (this->nserverid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->nserverid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PackMysqlServerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NFMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PackMysqlServerInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PackMysqlServerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NFMsg.PackMysqlServerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NFMsg.PackMysqlServerInfo)
    MergeFrom(*source);
  }
}

void PackMysqlServerInfo::MergeFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NFMsg.PackMysqlServerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.strdbname().size() > 0) {

    strdbname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbname_);
  }
  if (from.strdnsip().size() > 0) {

    strdnsip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdnsip_);
  }
  if (from.strdbuser().size() > 0) {

    strdbuser_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbuser_);
  }
  if (from.strdbpwd().size() > 0) {

    strdbpwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strdbpwd_);
  }
  if (from.nrconnecttime() != 0) {
    set_nrconnecttime(from.nrconnecttime());
  }
  if (from.nrconnecount() != 0) {
    set_nrconnecount(from.nrconnecount());
  }
  if (from.nport() != 0) {
    set_nport(from.nport());
  }
  if (from.nserverid() != 0) {
    set_nserverid(from.nserverid());
  }
}

void PackMysqlServerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NFMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackMysqlServerInfo::CopyFrom(const PackMysqlServerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NFMsg.PackMysqlServerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackMysqlServerInfo::IsInitialized() const {
  return true;
}

void PackMysqlServerInfo::Swap(PackMysqlServerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PackMysqlServerInfo::InternalSwap(PackMysqlServerInfo* other) {
  using std::swap;
  strdbname_.Swap(&other->strdbname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strdnsip_.Swap(&other->strdnsip_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strdbuser_.Swap(&other->strdbuser_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  strdbpwd_.Swap(&other->strdbpwd_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(nrconnecttime_, other->nrconnecttime_);
  swap(nrconnecount_, other->nrconnecount_);
  swap(nport_, other->nport_);
  swap(nserverid_, other->nserverid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PackMysqlServerInfo::GetMetadata() const {
  protobuf_NFMsgMysql_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NFMsgMysql_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace NFMsg
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PackMysqlParam* Arena::CreateMaybeMessage< ::NFMsg::PackMysqlParam >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PackMysqlParam >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::NFMsg::PackMysqlServerInfo* Arena::CreateMaybeMessage< ::NFMsg::PackMysqlServerInfo >(Arena* arena) {
  return Arena::CreateInternal< ::NFMsg::PackMysqlServerInfo >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
